#!/bin/sh
SSH_Port1='22'
SSH_Port2='299'

# Dropbear Ports
Dropbear_Port1='790'
Dropbear_Port2='2770'
# Privoxy Ports
Privoxy_Port1='9880'
Privoxy_Port2='2202'

# Squid Ports
Squid_Port1='8000'
Squid_Port2='7003'
Squid_Port3='9005'

OvpnDownload_Port='81'

#Requirement
apt update
apt upgrade -y
apt install openvpn stunnel4 privoxy dropbear vnstat ufw build-essential fail2ban zip -y

# initializing var
MYIP=$(wget -qO- ipv4.icanhazip.com);
MYIP2="s/xxxxxxxxx/$MYIP/g";
cd /root
wget "https://raw.githubusercontent.com/kingmapualaut/item/main/plugin.tgz"

# disable ipv6
echo 1 > /proc/sys/net/ipv6/conf/all/disable_ipv6

# set time GMT +8
ln -fs /usr/share/zoneinfo/Asia/Kuala_Lumpur /etc/localtime


 # Removing some duplicated sshd server configs
rm -f /etc/ssh/sshd_config

sleep 1

# Creating a SSH server config using cat eof tricks
cat <<'MySSHConfig' > /etc/ssh/sshd_config
# Project FOG OpenSSH Server config
# -blackestsaint
Port myPORT1
Port myPORT2
AddressFamily inet
ListenAddress 0.0.0.0
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key
PermitRootLogin yes
MaxSessions 1024
PubkeyAuthentication yes
PasswordAuthentication yes
PermitEmptyPasswords no
ChallengeResponseAuthentication no
UsePAM yes
X11Forwarding yes
PrintMotd no
ClientAliveInterval 300
ClientAliveCountMax 2
UseDNS no
Banner /etc/zorro-luffy
AcceptEnv LANG LC_*
Subsystem   sftp  /usr/lib/openssh/sftp-server

MySSHConfig

sleep 2
 # Now we'll put our ssh ports inside of sshd_config
 sed -i "s|myPORT1|$SSH_Port1|g" /etc/ssh/sshd_config
 sed -i "s|myPORT2|$SSH_Port2|g" /etc/ssh/sshd_config

 
 # My workaround code to remove `BAD Password error` from passwd command, it will fix password-related error on their ssh accounts.
 sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password
 sed -i 's/use_authtok //g' /etc/pam.d/common-password

 # Some command to identify null shells when you tunnel through SSH or using Stunnel, it will fix user/pass authentication error on HTTP Injector, KPN Tunnel, eProxy, SVI, HTTP Proxy Injector etc ssh/ssl tunneling apps.
 sed -i '/\/bin\/false/d' /etc/shells
 sed -i '/\/usr\/sbin\/nologin/d' /etc/shells
 echo '/bin/false' >> /etc/shells
 echo '/usr/sbin/nologin' >> /etc/shells

# Restarting openssh service
 systemctl restart ssh
  
 rm -f /etc/banner
 wget -qO /etc/banner "$SSH_Banner"
 dos2unix -q /etc/banner

sed -i '/password\s*requisite\s*pam_cracklib.s.*/d' /etc/pam.d/common-password && sed -i 's|use_authtok ||g' /etc/pam.d/common-password
 
 cat <<'MyDropbear' > /etc/default/dropbear
# disabled because OpenSSH is installed                              
# change to NO_START=0 to enable Dropbear                            
NO_START=0                                                           
# the TCP port that Dropbear listens on                              
DROPBEAR_PORT=800                                                   
# any additional arguments for Dropbear                              
DROPBEAR_EXTRA_ARGS=                                                 
# specify an optional banner file containing a message to be         
# sent to clients before they connect, such as "/etc/banner"      
DROPBEAR_BANNER="/etc/banner"                                                   
# RSA hostkey file (default: /etc/dropbear/dropbear_rsa_host_key)    
#DROPBEAR_RSAKEY="/etc/dropbear/dropbear_rsa_host_key"               
# DSS hostkey file (default: /etc/dropbear/dropbear_dss_host_key)    
#DROPBEAR_DSSKEY="/etc/dropbear/dropbear_dss_host_key"               
# ECDSA hostkey file (default: /etc/dropbear/dropbear_ecdsa_host_key)
#DROPBEAR_ECDSAKEY="/etc/dropbear/dropbear_ecdsa_host_key"           
# Receive window size - this is a tradeoff between memory and        
# network performance                                                
DROPBEAR_RECEIVE_WINDOW=65536
MyDropbear
 
 # Restarting dropbear service
 systemctl restart dropbear

 # Installing OpenVPN by pulling its repository inside sources.list file 
 rm -rf /etc/apt/sources.list.d/openvpn*
 echo "deb http://build.openvpn.net/debian/openvpn/stable $(lsb_release -sc) main" > /etc/apt/sources.list.d/openvpn.list
 wget -qO - http://build.openvpn.net/debian/openvpn/stable/pubkey.gpg|apt-key add -
 apt-get update
 apt-get install openvpn -y
#install OpenVPN
cp -r /usr/share/easy-rsa/ /etc/openvpn
mkdir /etc/openvpn/easy-rsa/keys

# Change Certificate
cd /etc/openvpn/
rm -Rf easy-rsa
rm -Rf ca.crt
rm -Rf server.crt
rm -Rf server.key
rm -Rf dh2048.pem
wget -q https://raw.githubusercontent.com/Vpaproject/file/main/certs.zip -O certs.zip
unzip certs.zip

cd

chmod +x /etc/openvpn/ca.crt

# Setting Server
tar -xzvf /root/plugin.tgz -C /usr/lib/openvpn/
chmod +x /usr/lib/openvpn/*
cat > /etc/openvpn/server_tcp.conf <<-END10
port 1103
proto tcp
dev tun
dev-type tun
sndbuf 100000
rcvbuf 100000
ca ca.crt
cert server.crt
key server.key
dh dh2048.pem
tls-auth ta.key 0
topology subnet
server 10.9.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "redirect-gateway def1 bypass-dhcp"
push "dhcp-option DNS 8.8.8.8"
push "dhcp-option DNS 8.8.4.4"
keepalive 10 120
cipher AES-256-CBC
auth SHA256
comp-lzo
user nobody
group nogroup
persist-tun
status openvpn-status.log
verb 2
mute 3
verify-client-cert none
username-as-common-name
plugin /usr/lib/openvpn/plugins/openvpn-plugin-auth-pam.so login
END10

cat > /etc/openvpn/server_udp.conf <<-END20
port 25222
proto udp
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server 10.8.0.0 255.255.255.0
ifconfig-pool-persist ipp.txt
push "dhcp-option DNS 1.0.0.1"
push "dhcp-option DNS 1.1.1.1"
push "redirect-gateway def1 bypass-dhcp"
ca ca.crt
cert server.crt
key server.key
dh dh2048.pem
tls-auth tls-auth.key 0
auth SHA256
cipher AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
status openvpn.log
verb 3
verify-client-cert none
username-as-common-name
plugin /usr/lib/openvpn/plugins/openvpn-plugin-auth-pam.so login
END20

# install squid
apt-get -y install squid
cat > /etc/squid/squid.conf <<-END
acl server dst xxxxxxxxx/32 localhost
acl checker src 188.93.95.137
acl ports_ port 14 22 53 21 8080 8081 8000 3128 1193 1194 440 441 442 443 80
http_port 3128
http_port 8000
http_port 8888
access_log none
cache_log /dev/null
logfile_rotate 0
http_access allow server
http_access allow checker
http_access deny all
forwarded_for off
via off
### Allow Headers
acl all src 0.0.0.0/0
http_access allow all
request_header_access Host allow all
request_header_access Content-Length allow all
request_header_access Content-Type allow all
request_header_access All deny all
hierarchy_stoplist cgi-bin ?
coredump_dir /var/spool/squid
refresh_pattern ^ftp: 1440 20% 10080
refresh_pattern ^gopher: 1440 0% 1440
refresh_pattern -i (/cgi-bin/|\?) 0 0% 0
refresh_pattern . 0 20% 4320
visible_hostname KinGmapua.com
END
sed -i $MYIP2 /etc/squid/squid.conf;
service squid restart

apt-get update
apt-get upgrade -y
apt-get install nginx 

 # Creating nginx config for our ovpn config downloads webserver
 cat <<'myNginxC' > /etc/nginx/conf.d/bonveio-ovpn-config.conf
# My OpenVPN Config Download Directory
server {
 listen 0.0.0.0:myNginx;
 server_name localhost;
 root /var/www/openvpn;
 index index.html;
}
myNginxC

 # Setting our nginx config port for .ovpn download site
 sed -i "s|myNginx|$OvpnDownload_Port|g" /etc/nginx/conf.d/bonveio-ovpn-config.conf

 # Removing Default nginx page(port 80)
 rm -rf /etc/nginx/sites-*

 # Creating our root directory for all of our .ovpn configs
 rm -rf /var/www/openvpn
 mkdir -p /var/www/openvpn
 rm /var/www/openvpn/index.html

wget https://raw.githubusercontent.com/89870must73/DEB/main/index.html
cp index.html /var/www/openvpn

systemctl start openvpn@server
#Create OpenVPN Config
cat > /var/www/openvpn/tcp.ovpn <<EOF1
# Gakod Script
# By: Gakod
auth-user-pass
client
dev tun
proto tcp-client
remote $MYIP 1103
http-proxy $MYIP 8080
http-proxy-retry
resolv-retry infinite
route-method exe
nobind
persist-key
persist-tun
comp-lzo
cipher AES-256-CBC
auth SHA256
push "redirect-gateway def1 bypass-dhcp"
verb 3
push-peer-info
ping 10
ping-restart 60
hand-window 70
server-poll-timeout 4
reneg-sec 2592000
sndbuf 100000
rcvbuf 100000
remote-cert-tls server
key-direction 1
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
<tls-auth>
$(cat /etc/openvpn/ta.key)
</tls-auth>
EOF1

cat > /var/www/openvpn/udp.ovpn << EOF3
# Gakod Script
# By: Gakod
auth-user-pass
client
dev tun
proto udp
remote $MYIP 25222
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name server_ADBtkp0yL46HLXPb name
auth SHA256
auth-nocache
cipher AES-128-CBC
tls-client
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
setenv opt block-outside-dns
verb 3
auth-user-pass
key-direction 1
<auth-user-pass>
sam
sam
</auth-user-pass>
<ca>
$(cat /etc/openvpn/ca.crt)
</ca>
<cert>
$(cat /etc/openvpn/server.crt)
</cert>
<key>
$(cat /etc/openvpn/server.key)
</key>
<tls-auth>
$(cat /etc/openvpn/tls-auth.key)
</tls-auth>
EOF3

client = yes
debug = 6

[openvpn]
accept = 127.0.0.1:1103
connect = $MYIP:587
TIMEOUTclose = 0
verify = 0
sni = www.viber.com.edgekey.net
END

# Configure Stunnel
sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
openssl req -new -newkey rsa:2048 -days 3650 -nodes -x509 -sha256 -subj '/CN=127.0.0.1/O=localhost/C=PH' -keyout /etc/stunnel/stunnel.pem -out /etc/stunnel/stunnel.pem
cat > /etc/stunnel/stunnel.conf <<-END

sslVersion = all
pid = /stunnel.pid
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
client = no

[openvpn]
accept = 587
connect = 127.0.0.1:1103
cert = /etc/stunnel/stunnel.pem

[dropbear]
accept = 446
connect = 127.0.0.1:800
cert = /etc/stunnel/stunnel.pem

[openssh]
accept = 445
connect = 127.0.0.1:22
cert = /etc/stunnel/stunnel.pem

END

#Setting UFW
ufw allow ssh
ufw allow 1103/tcp
sed -i 's|DEFAULT_INPUT_POLICY="DROP"|DEFAULT_INPUT_POLICY="ACCEPT"|' /etc/default/ufw
sed -i 's|DEFAULT_FORWARD_POLICY="DROP"|DEFAULT_FORWARD_POLICY="ACCEPT"|' /etc/default/ufw


# set ipv4 forward
echo 1 > /proc/sys/net/ipv4/ip_forward
sed -i 's|#net.ipv4.ip_forward=1|net.ipv4.ip_forward=1|' /etc/sysctl.conf

#Setting IPtables
cat > /etc/iptables.up.rules <<-END
*nat
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
-A POSTROUTING -j SNAT --to-source xxxxxxxxx
-A POSTROUTING -o eth0 -j MASQUERADE
-A POSTROUTING -s 192.168.10.0/24 -o eth0 -j MASQUERADE
COMMIT
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:fail2ban-ssh - [0:0]
-A INPUT -p tcp -m multiport --dports 22 -j fail2ban-ssh
-A INPUT -p ICMP --icmp-type 8 -j ACCEPT
-A INPUT -i eth0 -p tcp -m tcp --dport 110 -j ACCEPT
-A INPUT -i tun0 -j ACCEPT
-A INPUT -p tcp --dport 22  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 80  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 143  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 442  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 443  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 444  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 587  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 110  -m state --state NEW -j ACCEPT
-A INPUT -p udp --dport 110  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 3355  -m state --state NEW -j ACCEPT
-A INPUT -p udp --dport 3355  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 8085  -m state --state NEW -j ACCEPT
-A INPUT -p udp --dport 8085  -m state --state NEW -j ACCEPT 
-A INPUT -p tcp --dport 3356  -m state --state NEW -j ACCEPT
-A INPUT -p udp --dport 3356  -m state --state NEW -j ACCEPT
-A INPUT -p tcp --dport 8086  -m state --state NEW -j ACCEPT
-A INPUT -p udp --dport 8086  -m state --state NEW -j ACCEPT 
-A INPUT -p tcp --dport 10000  -m state --state NEW -j ACCEPT
-A fail2ban-ssh -j RETURN
-A OUTPUT -p icmp --icmp-type echo-request -j DROP
-A INPUT -p tcp --tcp-flags ALL NONE -j DROP
-A INPUT -p tcp --tcp-flags ALL ALL -j DROP
-A INPUT -f -j DROP
-A INPUT -p tcp ! --syn -m state --state NEW -j DROP
-A INPUT -m string --string "BitTorrent" --algo bm --to 65535 -j DROP
-A INPUT -m string --string "BitTorrent protocol" --algo bm --to 65535 -j DROP
-A INPUT -m string --string "peer_id=" --algo bm --to 65535 -j DROP
-A INPUT -m string --string ".torrent" --algo bm --to 65535 -j DROP
-A INPUT -m string --string "announce.php?passkey=" --algo bm --to 65535 -j DROP
-A INPUT -m string --string "torrent" --algo bm --to 65535 -j DROP
-A INPUT -m string --string "announce" --algo bm --to 65535 -j DROP
-A INPUT -m string --string "info_hash" --algo bm --to 65535 -j DROP
-A INPUT -m string --string "peer_id" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "BitTorrent" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "BitTorrent protocol" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "bittorrent-announce" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "announce.php?passkey=" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "find_node" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "info_hash" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "get_peers" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "announce" --algo kmp --to 65535 -j DROP
-A INPUT -m string --string "announce_peers" --algo kmp --to 65535 -j DROP
-t nat -A POSTROUTING -o eth0 -j MASQUERADE
-I OUTPUT -p tcp --dport 1723 -j ACCEPT
-A OUTPUT -p tcp --dport 6881:6889 -j DROP
-A FORWARD -m string --algo bm --string "BitTorrent" -j DROP
-A FORWARD -p tcp --dport 6881:6889 -j DROP
-D FORWARD -m string --algo bm --string "BitTorrent" -j LOGDROP
-D FORWARD -m string --algo bm --string "BitTorrent protocol" -j LOGDROP
-D FORWARD -m string --algo bm --string "peer_id=" -j LOGDROP
-D FORWARD -m string --algo bm --string ".torrent" -j LOGDROP
-D FORWARD -m string --algo bm --string "announce.php?passkey=" -j LOGDROP
-D FORWARD -m string --algo bm --string "torrent" -j LOGDROP
-D FORWARD -m string --algo bm --string "announce" -j LOGDROP
-D FORWARD -m string --algo bm --string "info_hash" -j LOGDROP
-A FORWARD -m string --string "get_peers" --algo bm -j DROP
-A FORWARD -m string --string "announce_peer" --algo bm -j LOGDROP
-A FORWARD -m string --string "find_node" --algo bm -j LOGDROP
-A FORWARD -p udp -m string --algo bm --string "BitTorrent" -j DROP
-A FORWARD -p udp -m string --algo bm --string "BitTorrent protocol" -j DROP
-A FORWARD -p udp -m string --algo bm --string "peer_id=" -j DROP
-A FORWARD -p udp -m string --algo bm --string ".torrent" -j DROP
-A FORWARD -p udp -m string --algo bm --string "announce.php?passkey=" -j DROP
-A FORWARD -p udp -m string --algo bm --string "torrent" -j DROP 
-A FORWARD -p udp -m string --algo bm --string "announce" -j DROP
-A FORWARD -p udp -m string --algo bm --string "info_hash" -j DROP 
-A FORWARD -p udp -m string --algo bm --string "tracker" -j DROP 
-A INPUT -p udp -m string --algo bm --string "BitTorrent" -j DROP 
-A INPUT -p udp -m string --algo bm --string "BitTorrent protocol" -j DROP iptables -A INPUT -p udp -m string --algo bm --string "peer_id=" -j DROP 
-A INPUT -p udp -m string --algo bm --string ".torrent" -j DROP 
-A INPUT -p udp -m string --algo bm --string "announce.php?passkey=" -j DROP iptables -A INPUT -p udp -m string --algo bm --string "torrent" -j DROP 
-A INPUT -p udp -m string --algo bm --string "announce" -j DROP 
-A INPUT -p udp -m string --algo bm --string "info_hash" -j DROP 
-A INPUT -p udp -m string --algo bm --string "tracker" -j DROP 
-I INPUT -p udp -m string --algo bm --string "BitTorrent" -j DROP 
-I INPUT -p udp -m string --algo bm --string "BitTorrent protocol" -j DROP iptables -I INPUT -p udp -m string --algo bm --string "peer_id=" -j DROP 
-I INPUT -p udp -m string --algo bm --string ".torrent" -j DROP 
-I INPUT -p udp -m string --algo bm --string "announce.php?passkey=" -j DROP iptables -I INPUT -p udp -m string --algo bm --string "torrent" -j DROP 
-I INPUT -p udp -m string --algo bm --string "announce" -j DROP
-I INPUT -p udp -m string --algo bm --string "info_hash" -j DROP 
-I INPUT -p udp -m string --algo bm --string "tracker" -j DROP 
-D INPUT -p udp -m string --algo bm --string "BitTorrent" -j DROP 
-D INPUT -p udp -m string --algo bm --string "BitTorrent protocol" -j DROP iptables -D INPUT -p udp -m string --algo bm --string "peer_id=" -j DROP 
-D INPUT -p udp -m string --algo bm --string ".torrent" -j DROP 
-D INPUT -p udp -m string --algo bm --string "announce.php?passkey=" -j DROP iptables -D INPUT -p udp -m string --algo bm --string "torrent" -j DROP 
-D INPUT -p udp -m string --algo bm --string "announce" -j DROP 
-D INPUT -p udp -m string --algo bm --string "info_hash" -j DROP 
-D INPUT -p udp -m string --algo bm --string "tracker" -j DROP 
-I OUTPUT -p udp -m string --algo bm --string "BitTorrent" -j DROP 
-I OUTPUT -p udp -m string --algo bm --string "BitTorrent protocol" -j DROP iptables -I OUTPUT -p udp -m string --algo bm --string "peer_id=" -j DROP 
-I OUTPUT -p udp -m string --algo bm --string ".torrent" -j DROP 
-I OUTPUT -p udp -m string --algo bm --string "announce.php?passkey=" -j DROP iptables -I OUTPUT -p udp -m string --algo bm --string "torrent" -j DROP 
-I OUTPUT -p udp -m string --algo bm --string "announce" -j DROP 
-I OUTPUT -p udp -m string --algo bm --string "info_hash" -j DROP 
-I OUTPUT -p udp -m string --algo bm --string "tracker" -j DROP
-D INPUT -m string --algo bm --string "BitTorrent" -j DROP 
-D INPUT -m string --algo bm --string "BitTorrent protocol" -j DROP 
-D INPUT -m string --algo bm --string "peer_id=" -j DROP
-D INPUT -m string --algo bm --string ".torrent" -j DROP 
-D INPUT -m string --algo bm --string "announce.php?passkey=" -j DROP 
-D INPUT -m string --algo bm --string "torrent" -j DROP 
-D INPUT -m string --algo bm --string "announce" -j DROP
-D INPUT -m string --algo bm --string "info_hash" -j DROP
-D INPUT -m string --algo bm --string "tracker" -j DROP 
-D OUTPUT -m string --algo bm --string "BitTorrent" -j DROP
-D OUTPUT -m string --algo bm --string "BitTorrent protocol" -j DROP
-D OUTPUT -m string --algo bm --string "peer_id=" -j DROP
-D OUTPUT -m string --algo bm --string ".torrent" -j DROP
-D OUTPUT -m string --algo bm --string "announce.php?passkey=" -j DROP 
-D OUTPUT -m string --algo bm --string "torrent" -j DROP
-D OUTPUT -m string --algo bm --string "announce" -j DROP
-D OUTPUT -m string --algo bm --string "info_hash" -j DROP
-D OUTPUT -m string --algo bm --string "tracker" -j DROP 
-D FORWARD -m string --algo bm --string "BitTorrent" -j DROP
-D FORWARD -m string --algo bm --string "BitTorrent protocol" -j DROP
-D FORWARD -m string --algo bm --string "peer_id=" -j DROP
-D FORWARD -m string --algo bm --string ".torrent" -j DROP
-D FORWARD -m string --algo bm --string "announce.php?passkey=" -j DROP
-D FORWARD -m string --algo bm --string "torrent" -j DROP
-D FORWARD -m string --algo bm --string "announce" -j DROP
-D FORWARD -m string --algo bm --string "info_hash" -j DROP
-D FORWARD -m string --algo bm --string "tracker" -j DROP
COMMIT
*raw
:PREROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT
*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
COMMIT
END
sed -i $MYIP2 /etc/iptables.up.rules;
iptables-restore < /etc/iptables.up.rules

#Create Admin
useradd admin
echo "admin:itangsagli" | chpasswd

# Create and Configure rc.local
cat > /etc/rc.local <<-END
#!/bin/sh -e

exit 0
END
chmod +x /etc/rc.local
sed -i '$ i\echo "nameserver 8.8.8.8" > /etc/resolv.conf' /etc/rc.local
sed -i '$ i\echo "nameserver 8.8.4.4" >> /etc/resolv.conf' /etc/rc.local
sed -i '$ i\iptables-restore < /etc/iptables.up.rules' /etc/rc.local

# color text
cd
rm -rf /root/.bashrc
wget -O /root/.bashrc "https://raw.githubusercontent.com/KeningauVPS/sslmode/master/tools/.bashrc"

# install lolcat
sudo apt-get -y install ruby
sudo gem install lolcat

# download script
wget https://raw.githubusercontent.com/89870must73/utu/main/setupmenu && chmod +x setupmenu && ./setupmenu
# add eth0 to vnstat
vnstat -u -i eth0

# compress configs
cd /var/www/openvpn
zip configs.zip tcp.ovpn udp.ovpn ssl.ovpn ohp.ovpn

# install libxml-parser
apt-get install libxml-parser-perl -y -f

# finalizing
vnstat -u -i eth0
apt-get -y autoremove
chown -R www-data:www-data /var/www/openvpn
service nginx start
service vnstat restart
service openvpn restart
service dropbear restart
service fail2ban restart
service squid restart
service privoxy restart

#clearing history
history -c
rm -rf /root/*
cd /root
# info
clear
echo " "
echo "Installation has been completed!!"
echo " Please Reboot your VPS"
echo "--------------------------- Configuration Setup Server -------------------------"
echo "                            Debian Premium Script                               "
echo "                                 -Gakod-                                   "
echo "--------------------------------------------------------------------------------"
echo ""  | tee -a log-install.txt
echo "Server Information"  | tee -a log-install.txt
echo "   - Timezone    : Asia/Manila (GMT +8)"  | tee -a log-install.txt
echo "   - Fail2Ban    : [ON]"  | tee -a log-install.txt
echo "   - IPtables    : [ON]"  | tee -a log-install.txt
echo "   - Auto-Reboot : [OFF]"  | tee -a log-install.txt
echo "   - IPv6        : [OFF]"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "Application & Port Information"  | tee -a log-install.txt
echo "   - OpenVPN		: TCP 110 "  | tee -a log-install.txt
echo "   - OpenVPN-SSL	: 443 "  | tee -a log-install.txt
echo "   - Dropbear		: 442"  | tee -a log-install.txt
echo "   - Stunnel  	: 444"  | tee -a log-install.txt
echo "   - Squid Proxy	: 3355, 8085 (limit to IP Server)"  | tee -a log-install.txt
echo "   - Privoxy		: 3356, 8086 (limit to IP Server)"  | tee -a log-install.txt
echo "   - BadVPN		: 7300"  | tee -a log-install.txt
echo "   - Nginx		: 80"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "Premium Script Information"  | tee -a log-install.txt
echo "   To display list of commands: menu"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "Important Information"  | tee -a log-install.txt
echo "   - Download Config OpenVPN : http://$MYIP/configs.zip"  | tee -a log-install.txt
echo "   - Installation Log        : cat /root/log-install.txt"  | tee -a log-install.txt
echo ""  | tee -a log-install.txt
echo "   - Webmin                  : http://$MYIP:10000/"  | tee -a log-install.txt
echo ""
echo "------------------------------ Team Gakod -----------------------------"
echo "-----Please Reboot your VPS -----"
sleep 2
