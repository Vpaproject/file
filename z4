#!/bin/bash
export DEBIAN_FRONTEND=noninteractive
if ! [[ -e /etc/debian_version ]]; then
	echo For DEBIAN and UBUNTU only.
	exit;fi
if [[ `lsb_release -si` = Debian ]];then
	sed -i 's/jessie/stretch/g' /etc/apt/sources.list
else sed -i 's/xenial/bionic/g' /etc/apt/sources.list;fi
OPT='-o Acquire::Check-Valid-Until=false -yq -o DPkg::Options::=--force-confdef -o DPkg::Options::=--force-confnew --allow-unauthenticated'
apt-get update
yes | apt $OPT dist-upgrade
apt-get install openvpn openssl squid -y
PORT="1103"
IP=$(wget -qO- ipv4.icanhazip.com)
PROTOCOL="TCP"
CIPHER="AES-128-CBC"
DH_KEY_SIZE="2048"
RSA_KEY_SIZE="2048"
CLIENT="Client"
FNAME=client-${IP##*.}.ovpn
newclient() {
	echo -e "`cat /etc/openvpn/client-template.txt`
<ca>
`cat /etc/openvpn/ca.crt`
</ca>
<cert>
`cat /etc/openvpn/easy-rsa/pki/issued/$CLIENT.crt`
</cert>
<key>
`cat /etc/openvpn/easy-rsa/pki/private/$CLIENT.key`
</key>
<tls-auth>
`cat /etc/openvpn/tls-auth.key`
</tls-auth>" > ~/$FNAME
echo "Your client config is available at /root/$FNAME"
}
	# Reapply IPTABLES
	echo "#!/bin/sh
iptables -F
iptables -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
iptables -I FORWARD -j ACCEPT
iptables -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT
sysctl -w net.ipv4.ip_forward=1" > /sbin/iptab
	chmod a+x /sbin/iptab;iptab
	echo "[Unit]
Description=Packet Filtering Framework
DefaultDependencies=no
Before=network-pre.target
Wants=network-pre.target
[Service]
Type=oneshot
ExecStart=/sbin/iptab
ExecReload=/sbin/iptab
RemainAfterExit=yes
[Install]
WantedBy=multi-user.target" > /etc/systemd/system/iptab.service
sed -i '/net.ipv4.ip_forward/{s/#//g}' /etc/sysctl.conf
sysctl -p
systemctl daemon-reload
systemctl enable iptab
cd /etc/openvpn
if ! [ -d easy-rsa ];then
wget -qO- https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.4/EasyRSA-3.0.4.tgz | tar xz
mv EasyRSA-3.0.4 easy-rsa || return
cd easy-rsa
touch pki/.rnd
SERVER_CN="cn_$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 16 | head -n 1)"
SERVER_NAME="server_$(tr -dc 'a-zA-Z0-9' < /dev/urandom | fold -w 16 | head -n 1)"
echo "set_var EASYRSA_KEY_SIZE $RSA_KEY_SIZE
set_var EASYRSA_REQ_CN $SERVER_CN
set_var EASYRSA_CRL_DAYS 3650" > vars
	./easyrsa init-pki
	./easyrsa --batch build-ca nopass
	./easyrsa gen-crl
	openvpn --genkey --secret /etc/openvpn/tls-auth.key
	openssl dhparam -out dh.pem $DH_KEY_SIZE
	./easyrsa build-server-full $SERVER_NAME nopass
	./easyrsa build-client-full $CLIENT nopass
	cp pki/ca.crt pki/private/ca.key dh.pem pki/issued/$SERVER_NAME.crt pki/private/$SERVER_NAME.key /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn
	chmod a+x /etc/openvpn/crl.pem
else SERVER_NAME=`ls /etc/openvpn/server*.key | grep -oE 'server_[0-9a-Z]+'`; fi
	# Generate server.conf
	echo 'port '$PORT'
proto tcp
dev tun
crl-verify crl.pem
ca ca.crt
cert '$SERVER_NAME'.crt
key '$SERVER_NAME'.key
tls-auth tls-auth.key 0
dh dh.pem
topology subnet
server 10.10.0.0 255.255.255.0
push "dhcp-option DNS 67.207.67.2"
push "dhcp-option DNS 67.207.67.3"
push "redirect-gateway def1 bypass-dhcp"
ncp-ciphers AES-128-GCM:AES-128-CBC
cipher AES-128-CBC
tls-server
tls-version-min 1.2
tls-cipher TLS-DHE-RSA-WITH-AES-128-GCM-SHA256
status clients.log
duplicate-cn
tcp-nodelay
reneg-sec 0' > /etc/openvpn/server.conf

echo "client
dev tun
proto tcp
remote-cert-tls server
remote 127.0.0.1 $PORT
http-proxy $IP 993
http-proxy-option VERSION 1.1
http-proxy-option CUSTOM-HEADER Host weixin.qq.cn
setenv opt block-outside-dns
cipher AES-128-CBC
auth SHA1
key-direction 1
auth-nocache" > /etc/openvpn/client-template.txt

sq=$([ -d /etc/squid ] && echo squid || echo squid3)
mv /etc/$sq/squid.conf /etc/$sq/squid.confx
echo 'http_access allow all
via off
http_port 0.0.0.0:993
visible_hostname udp.team' > /etc/$sq/squid.conf
systemctl restart {$sq,openvpn@server,iptab}
clear
wget -qO- "https://raw.githubusercontent.com/X-DCB/Unix/master/banner" | bash
echo "Finished!"
newclient

# Generates the custom client.ovpn
newclient "$CLIENT"
echo ""
echo "Finished!"
echo ""
echo "Your client config is available at ~/$CLIENT.ovpn"

echo ""
echo -e "\033[35;1m { install nginx }  "
echo ""
	cd
	apt-get -y install nginx
	cat > /etc/nginx/nginx.conf <<END
user www-data;
worker_processes 2;
pid /var/run/nginx.pid;
events {
	multi_accept on;
        worker_connections 1024;
}
http {
	autoindex on;
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
        client_max_body_size 32M;
	client_header_buffer_size 8m;
	large_client_header_buffers 8 8m;
	fastcgi_buffer_size 8m;
	fastcgi_buffers 8 8m;
	fastcgi_read_timeout 600;
        include /etc/nginx/conf.d/*.conf;
}
END
	mkdir -p /home/vps/public_html
	echo "<pre>by MyGatherBK | MyGatherBK</pre>" > /home/vps/public_html/index.html
	echo "<?phpinfo(); ?>" > /home/vps/public_html/info.php
	args='$args'
	uri='$uri'
	document_root='$document_root'
	fastcgi_script_name='$fastcgi_script_name'
	cat > /etc/nginx/conf.d/vps.conf <<END
server {
    listen       85;
    server_name  127.0.0.1 localhost;
    access_log /var/log/nginx/vps-access.log;
    error_log /var/log/nginx/vps-error.log error;
    root   /home/vps/public_html;
    location / {
        index  index.html index.htm index.php;
	try_files $uri $uri/ /index.php?$args;
    }
    location ~ \.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
    }
}
END




	 
	apt-get -y install vnstat
	cd /etc/openvpn/easy-rsa/
	./easyrsa build-client-full $CLIENT nopass
	newclient "$CLIENT"
	cp /root/$CLIENT.ovpn /home/vps/public_html/
	rm -f /root/$CLIENT.ovpn
	case $OPENVPNSYSTEM in
		2)
		useradd $Usernames
		echo -e "$Passwords\n$Passwords\n"|passwd $Usernames &> /dev/null
		;;
	esac
	clear
